{"version":3,"sources":["../../bin/www"],"names":["app","require","debug","http","onError","error","syscall","bind","port","code","console","process","exit","onListening","addr","server","address","normalizePort","val","parseInt","isNaN","env","PORT","set","createServer","listen","log","on"],"mappings":";;AASA;;AAPA;;;;AAIA,IAAIA,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,OAAR,EAAiB,eAAjB,CAAZ;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;;AAGA;;;;AAIA,IAAMG,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACvB,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;;AAED,QAAME,OAAO,OAAOC,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFhB;;AAIA;AACA,YAAQH,MAAMI,IAAd;AACI,aAAK,QAAL;AACIC,oBAAQL,KAAR,CAAcE,OAAO,+BAArB;AACAI,oBAAQC,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACIF,oBAAQL,KAAR,CAAcE,OAAO,oBAArB;AACAI,oBAAQC,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAMP,KAAN;AAVR;AAYH,CAtBD;;AAwBA;;;;AAIA,IAAMQ,cAAc,SAAdA,WAAc,GAAM;AACtB,QAAIC,OAAOC,OAAOC,OAAP,EAAX;AACA,QAAIT,OAAO,OAAOO,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,KAAKN,IAFrB;AAGAN,UAAM,kBAAkBK,IAAxB;AACH,CAND;;AAQA;;;;AAIA,IAAMU,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AAC3B,QAAMV,OAAOW,SAASD,GAAT,EAAc,EAAd,CAAb;;AAEA,QAAIE,MAAMZ,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOU,GAAP;AACH;;AAED,QAAIV,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;;AAED,WAAO,KAAP;AACH,CAdD;AAeA;;;;AAIA,IAAIA,OAAOS,cAAcN,QAAQU,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAtB,IAAIuB,GAAJ,CAAQ,MAAR,EAAgBf,IAAhB;;AAEA;;;;AAIA,IAAIO,SAASZ,KAAKqB,YAAL,CAAkBxB,GAAlB,CAAb;;AAEA;;;;AAIAe,OAAOU,MAAP,CAAcjB,IAAd,EAAoB,YAAM;AACtBE,YAAQgB,GAAR,uBAAgClB,IAAhC;AACH,CAFD;AAGAO,OAAOY,EAAP,CAAU,OAAV,EAAmBvB,OAAnB;AACAW,OAAOY,EAAP,CAAU,WAAV,EAAuBd,WAAvB","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nlet app = require('../app');\nlet debug = require('debug')('server:server');\nlet http = require('http');\nimport 'dotenv/config';\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nconst onError = (error) => {\n    if (error.syscall !== 'listen') {\n        throw error;\n    }\n\n    const bind = typeof port === 'string'\n        ? 'Pipe ' + port\n        : 'Port ' + port;\n\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n        case 'EACCES':\n            console.error(bind + ' requires elevated privileges');\n            process.exit(1);\n            break;\n        case 'EADDRINUSE':\n            console.error(bind + ' is already in use');\n            process.exit(1);\n            break;\n        default:\n            throw error;\n    }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nconst onListening = () => {\n    var addr = server.address();\n    var bind = typeof addr === 'string'\n        ? 'pipe ' + addr\n        : 'port ' + addr.port;\n    debug('Listening on ' + bind);\n}\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nconst normalizePort = (val) => {\n    const port = parseInt(val, 10);\n\n    if (isNaN(port)) {\n        // named pipe\n        return val;\n    }\n\n    if (port >= 0) {\n        // port number\n        return port;\n    }\n\n    return false;\n}\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nlet server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port, () => {\n    console.log(`running on port: ${port}`)\n});\nserver.on('error', onError);\nserver.on('listening', onListening);"]}